{"version":3,"sources":["components/header/header.component.jsx","redux/postsSlice.js","components/addNewPost/addNewPost.component.jsx","components/timeAgo_Copied/TimeAgo.component.jsx","components/reactionButtons/ReactionButtons.component.jsx","components/showPosts/ShowPosts.component.jsx","components/singlePost/SinglePost.component.jsx","components/editPost/EditPost.component.jsx","App.js","serviceWorker.js","redux/authorsSlice.js","redux/store.js","index.js"],"names":["Header","className","to","state","id","title","authorId","content","date","sub","Date","minutes","toISOString","reactions","like","heart","smile","currentUserReactions","liked","hearted","smiled","postsSlice","createSlice","name","initialState","reducers","addPost","reducer","action","splice","payload","prepare","nanoid","reactButtonClicked","postId","reactionType","currentReaction","currentPostObj","find","obj","str","slice","length","editPost","actions","AddNewPost","dispatch","useDispatch","useState","setTitle","setAuthorId","setContent","options","useSelector","authors","map","value","key","onSubmit","e","preventDefault","document","querySelector","selectedIndex","htmlFor","type","required","placeholder","onChange","target","rows","TimeAgo","timestamp","timeAgo","parseISO","timePeriod","formatDistanceToNow","ReactionButtons","post","decideIcon","ifChecked","classSelector","iconName","class","onClick","likeIcon","heartIcon","smileIcon","ShowPosts","posts","author","filter","SinglePost","urlParams","ob","match","params","EditPost","history","useHistory","currentPost","push","App","exact","path","component","Boolean","window","location","hostname","authorsSlice","configureStore","postsReducer","authorsReducer","ReactDOM","render","StrictMode","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95284ae1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n      <Link className=\"navbar-brand text-info lead\" to=\"/\">\r\n        FeedNow\r\n      </Link>\r\n    </nav>\r\n  );\r\n}\r\n","import { createSlice, nanoid } from \"@reduxjs/toolkit\";\r\n\r\nimport { sub } from \"date-fns\";\r\n\r\nconst state = [\r\n  {\r\n    id: 2,\r\n    title: \"Second post\",\r\n    authorId: \"1342uuiwns2\",\r\n    content: \"Lorem ipsum dolor sit amet, consectetur adipisicing elit.\",\r\n    date: sub(new Date(), { minutes: 10 }).toISOString(),\r\n    reactions: {\r\n      like: 10,\r\n      heart: 5,\r\n      smile: 8,\r\n    },\r\n    currentUserReactions: {\r\n      liked: false,\r\n      hearted: true,\r\n      smiled: false,\r\n    },\r\n  },\r\n  {\r\n    id: 1,\r\n    title: \"First post\",\r\n    authorId: \"133aff2s31\",\r\n    content: \"Lorem ipsum dolor sit amet, consectetur adipisicing elit.\",\r\n    date: sub(new Date(), { minutes: 100 }).toISOString(),\r\n    reactions: {\r\n      like: 100,\r\n      heart: 69,\r\n      smile: 120,\r\n    },\r\n    currentUserReactions: {\r\n      liked: true,\r\n      hearted: false,\r\n      smiled: true,\r\n    },\r\n  },\r\n];\r\n\r\nconst postsSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState: state,\r\n  reducers: {\r\n    addPost: {\r\n      reducer(state, action) {\r\n        state.splice(0, 0, action.payload);\r\n      },\r\n      prepare(title, authorId, content) {\r\n        return {\r\n          payload: {\r\n            id: nanoid(),\r\n            title,\r\n            authorId,\r\n            content,\r\n            date: new Date().toISOString(),\r\n          },\r\n        };\r\n      },\r\n    },\r\n    reactButtonClicked: (state, action) => {\r\n      const { postId, reactionType, currentReaction } = action.payload;\r\n      const currentPostObj = state.find((obj) => obj.id === postId);\r\n      currentPostObj.currentUserReactions[reactionType] = !currentReaction;\r\n\r\n      let str = reactionType.slice(0, reactionType.length - 1); // liked -> like\r\n      if (reactionType === \"hearted\") str = \"heart\";\r\n\r\n      if (!currentReaction) currentPostObj.reactions[str] += 1;\r\n      else currentPostObj.reactions[str] -= 1;\r\n    },\r\n    editPost: (state, action) => {\r\n      // eslint-disable-next-line eqeqeq\r\n      const currentPostObj = state.find((obj) => obj.id == action.payload.id);\r\n      currentPostObj.title = action.payload.title;\r\n      currentPostObj.content = action.payload.content;\r\n    },\r\n  },\r\n});\r\n\r\nexport default postsSlice.reducer;\r\n\r\nexport const { addPost, editPost, reactButtonClicked } = postsSlice.actions;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addPost } from \"./../../redux/postsSlice\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport default function AddNewPost() {\r\n  const dispatch = useDispatch();\r\n\r\n  const [title, setTitle] = useState(\"\");\r\n  const [authorId, setAuthorId] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    dispatch(addPost(title, authorId, content));\r\n    setTitle(\"\");\r\n    setAuthorId(\"\");\r\n    setContent(\"\");\r\n\r\n    document.querySelector(\"#post-Id\").selectedIndex = 0;\r\n  }\r\n\r\n  const authors = useSelector((state) => state.authors);\r\n  const options = authors.map(({ id, name }) => (\r\n    <option value={id} key={id}>\r\n      {name}\r\n    </option>\r\n  ));\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label className=\"col-form-label\" htmlFor=\"post-title\">\r\n            Post Title:\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            required\r\n            placeholder=\"Post Title\"\r\n            id=\"post-title\"\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"post-Id\">Author</label>\r\n          <select\r\n            className=\"form-control\"\r\n            id=\"post-Id\"\r\n            onChange={(e) => setAuthorId(e.target.value)}\r\n          >\r\n            <option value=\"\"></option>\r\n            {options}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"post-content\">Content:</label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"post-content\"\r\n            rows=\"4\"\r\n            required\r\n            value={content}\r\n            onChange={(e) => setContent(e.target.value)}\r\n          ></textarea>\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-info rounded-pill\">\r\n          Add Post\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { parseISO, formatDistanceToNow } from \"date-fns\";\r\n\r\nexport const TimeAgo = ({ timestamp }) => {\r\n  let timeAgo = \"\";\r\n  if (timestamp) {\r\n    const date = parseISO(timestamp);\r\n    const timePeriod = formatDistanceToNow(date);\r\n    timeAgo = `${timePeriod} ago`;\r\n  }\r\n\r\n  return (\r\n    <span title={timestamp}>\r\n      &nbsp; <i>{timeAgo}</i>\r\n    </span>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { reactButtonClicked } from \"./../../redux/postsSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nexport default function ReactionButtons({ post }) {\r\n  // for filling\r\n  // document.querySelector(\".icon-heart\").name = \"heart-sharp\";\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { reactions, currentUserReactions, id } = post;\r\n\r\n  const { heart, like, smile } = reactions;\r\n  const { hearted, liked, smiled } = currentUserReactions;\r\n\r\n  function decideIcon(\r\n    ifChecked,\r\n    postId,\r\n    classSelector,\r\n    iconName,\r\n    reactionType,\r\n    currentReaction\r\n  ) {\r\n    if (ifChecked)\r\n      return (\r\n        <ion-icon\r\n          class={classSelector}\r\n          onClick={() =>\r\n            dispatch(\r\n              reactButtonClicked({ postId, reactionType, currentReaction })\r\n            )\r\n          }\r\n          name={`${iconName}-sharp`}\r\n        ></ion-icon>\r\n      );\r\n    return (\r\n      <ion-icon\r\n        class={classSelector}\r\n        onClick={() =>\r\n          dispatch(\r\n            reactButtonClicked({ postId, reactionType, currentReaction })\r\n          )\r\n        }\r\n        name={`${iconName}-outline`}\r\n      ></ion-icon>\r\n    );\r\n  }\r\n\r\n  const likeIcon = decideIcon(\r\n    liked,\r\n    id,\r\n    \"icon-like\",\r\n    \"thumbs-up\",\r\n    \"liked\",\r\n    liked\r\n  );\r\n  const heartIcon = decideIcon(\r\n    hearted,\r\n    id,\r\n    \"icon-heart\",\r\n    \"heart\",\r\n    \"hearted\",\r\n    hearted\r\n  );\r\n  const smileIcon = decideIcon(\r\n    smiled,\r\n    id,\r\n    \"icon-smile\",\r\n    \"happy\",\r\n    \"smiled\",\r\n    smiled\r\n  );\r\n\r\n  return (\r\n    <div className=\"d-flex\">\r\n      <div className=\"d-flex flex-column align-items-center\">\r\n        {likeIcon}\r\n        <p className=\"lead\">{like}</p>\r\n      </div>\r\n      <div className=\"d-flex flex-column align-items-center\">\r\n        {heartIcon}\r\n        <p className=\"lead\">{heart}</p>\r\n      </div>\r\n\r\n      <div className=\"d-flex flex-column align-items-center\">\r\n        {smileIcon}\r\n        <p className=\"lead\">{smile}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { TimeAgo } from \"./../timeAgo_Copied/TimeAgo.component\";\r\nimport ReactionButtons from \"./../reactionButtons/ReactionButtons.component\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function ShowPosts() {\r\n  let posts = useSelector((state) => state.posts);\r\n  const authors = useSelector((state) => state.authors);\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"display-4 mb-5\">Posts</div>\r\n      {posts.map(function (post) {\r\n        const { id, title, authorId, content, date } = post;\r\n        const author = authors.filter((author) => author.id === authorId);\r\n\r\n        return (\r\n          <div key={id} className=\"post p-5 mb-3\">\r\n            <h5>{title}</h5>\r\n            <cite title=\"Source Title\">By {author[0].name}</cite>\r\n            <div className=\"lead\">{content}</div>\r\n            <Link\r\n              className=\"btn btn-outline-info rounded-pill mt-4\"\r\n              to={`/posts/${id}`}\r\n            >\r\n              {\" \"}\r\n              View Post{\" \"}\r\n            </Link>\r\n            <hr />\r\n            <ReactionButtons post={post} />\r\n            <div className=\"mt-2\"></div>\r\n            <TimeAgo timestamp={date} />\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport default function SinglePost(urlParams) {\r\n  const posts = useSelector((state) => state.posts);\r\n  const authors = useSelector((state) => state.authors);\r\n\r\n  // eslint-disable-next-line eqeqeq\r\n  const post = posts.find((ob) => ob.id == urlParams.match.params.postId);\r\n\r\n  if (!post)\r\n    return (\r\n      <div className=\"container my-5\">\r\n        <div className=\"alert alert-info p-5 my-5 text-center\">\r\n          <div className=\"display-4\">Requested Page Not Found!</div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n  const { id, title, authorId, content } = post;\r\n  const author = authors.filter((author) => author.id === authorId);\r\n\r\n  return (\r\n    <div className=\"container my-5\">\r\n      <div className=\"jumbotron\">\r\n        <div className=\"display-4\">{title}</div>\r\n        <p className=\"lead\">{content}</p>\r\n        <span>\r\n          {\" \"}\r\n          <i>By {author[0].name}</i>\r\n        </span>\r\n        <hr />\r\n        <Link\r\n          to={`/editPost/${id}`}\r\n          className=\"btn btn-outline-warning rounded-pill mr-2\"\r\n        >\r\n          Edit Post\r\n        </Link>\r\n        <Link to=\"/\" className=\"btn btn-outline-info rounded-pill\">\r\n          Go Back\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { editPost } from \"./../../redux/postsSlice\";\r\n\r\nexport default function EditPost(urlParams) {\r\n  const id = urlParams.match.params.postId;\r\n\r\n  const history = useHistory();\r\n\r\n  const dispatch = useDispatch();\r\n  const posts = useSelector((state) => state.posts);\r\n  // eslint-disable-next-line eqeqeq\r\n  const currentPost = posts.find((obj) => obj.id == id);\r\n\r\n  const [title, setTitle] = useState(currentPost.title);\r\n  const [content, setContent] = useState(currentPost.content);\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    dispatch(\r\n      editPost({\r\n        id,\r\n        title,\r\n        content,\r\n      })\r\n    );\r\n    history.push(\"/posts/\" + id);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label className=\"col-form-label\" htmlFor=\"post-title\">\r\n            Post Title:\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            required\r\n            placeholder=\"Post Title\"\r\n            id=\"post-title\"\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"exampleTextarea\">Content:</label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"exampleTextarea\"\r\n            rows=\"4\"\r\n            required\r\n            value={content}\r\n            onChange={(e) => setContent(e.target.value)}\r\n          ></textarea>\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-info rounded-pill\">\r\n          Save Post\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./resources/bootswatch.css\";\r\nimport \"./App.css\";\r\n\r\nimport Header from \"./components/header/header.component\";\r\nimport AddNewPost from \"./components/addNewPost/addNewPost.component\";\r\nimport ShowPosts from \"./components/showPosts/ShowPosts.component\";\r\nimport SinglePost from \"./components/singlePost/SinglePost.component\";\r\nimport EditPost from \"./components/editPost/EditPost.component\";\r\n\r\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter>\r\n      <div className=\"App\">\r\n        <Header />\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <AddNewPost />\r\n            <ShowPosts />\r\n          </Route>\r\n\r\n          <Route exact path=\"/posts/:postId\" component={SinglePost} />\r\n          <Route exact path=\"/editPost/:postId\" component={EditPost} />\r\n\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      </div>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst state = [\r\n  { name: \"Jashan Gill\", id: \"133aff2s31\" },\r\n  { name: \"Jack\", id: \"133afdaadk2\" },\r\n  { name: \"Jimmy\", id: \"1342uuiwns2\" },\r\n  { name: \"Michael\", id: \"14822jdah431\" },\r\n];\r\n\r\nconst authorsSlice = createSlice({\r\n  name: \"authors\",\r\n  initialState: state,\r\n  reducers: {},\r\n});\r\n\r\nexport default authorsSlice.reducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport postsReducer from \"./postsSlice\";\r\nimport authorsReducer from \"./authorsSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    posts: postsReducer,\r\n    authors: authorsReducer,\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport store from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}